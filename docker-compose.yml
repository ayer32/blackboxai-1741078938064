version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
    depends_on:
      - redis
      - mongodb
      - nlu-service
      - voice-service
      - face-service
    networks:
      - krish-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  # NLU Service
  nlu-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.nlu
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - krish-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Voice Service
  voice-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.voice
    environment:
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/google.json
    volumes:
      - ./credentials:/app/credentials
    networks:
      - krish-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Face Recognition Service
  face-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.face
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - krish-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Redis for caching and session management
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - krish-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # MongoDB for data persistence
  mongodb:
    image: mongo:5
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - krish-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Plugin Service for third-party extensions
  plugin-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.plugin
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017
    depends_on:
      - redis
      - mongodb
    networks:
      - krish-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Authentication Service
  auth-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.auth
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017
    depends_on:
      - redis
      - mongodb
    networks:
      - krish-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Frontend Service
  frontend:
    build:
      context: ./mobile
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://api-gateway:8000
    networks:
      - krish-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Monitoring Service
  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - krish-network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - krish-network

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - krish-network
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - krish-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.9.3
    volumes:
      - ./logs:/var/log/krish
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml
    networks:
      - krish-network
    depends_on:
      - elasticsearch

volumes:
  redis-data:
  mongodb-data:
  elasticsearch-data:

networks:
  krish-network:
    driver: overlay
